set nocompatible
filetype off

" Windows plays by its own rules
if has('win32')
    set rtp+=~/vimfiles/bundle/Vundle.vim
    let path=expand('~/vimfiles/bundle')
    call vundle#begin(path)
else
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
endif

Plugin 'gmarik/Vundle.vim'

Plugin 'scrooloose/syntastic'
Plugin 'bling/vim-airline'
Plugin 'tpope/vim-vinegar'
Plugin 'tpope/vim-fugitive'
Plugin 'Valloric/YouCompleteMe'
Plugin 'szw/vim-tags'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

call vundle#end()

filetype plugin indent on

""" Plugin settings

" Syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list=1
let g:syntastic_loc_list_height=5
let g:syntastic_check_on_open=1

let g:syntastic_python_python_exec='/usr/bin/env python'
let g:syntastic_python_checkers=['python']

let g:syntastic_c_checkers=['gcc', 'make']

let g:syntastic_xml_chekers=['xmllint']

" Airline
if !exists('g:airline_symbols')
    let g:airline_symbols={}
endif

let g:airline_left_sep='î‚°'
let g:airline_left_alt_sep='î‚±'
let g:airline_right_sep='î‚²'
let g:airline_right_alt_sep='î‚³'
let g:airline_symbols.branch='î‚ '
let g:airline_symbols.readonly='î‚¢'
let g:airline_symbols.linenr='Â¶'
let g:airline_symbols.paste='Ãž'
let g:airline_symbols.whitespace='Îž'

" YouCompleteMe
let g:ycm_global_ycm_extra_conf=expand('~/.vim/ycm_extra_conf.py')

" vim-tags
let g:vim_tags_auto_generate=1
let g:vim_tags_ignore_fies=['.gitignore', '.svnignore', '.cvsignore']
let g:vim_tags_ignore_file_comment_pattern='^[#"]'
let g:vim_tags_directories=[".git", ".hg", ".svn", ".bzr", "_darcs", "CVS"]
let g:vim_tags_main_file='tags'
let g:vim_tags_extension='.tags'
let g:vim_tags_cache_dir=expand('~/.vim')

" UltiSnips
let g:UltiSnipsExpandTrigger='<f10>'
let g:UltiSnipsListSnippets='<c-f10>'
let g:UltiSnipsJumpForwardTrigger='<f10>'
let g:UltiSnipsJumpBackwardTrigger='<s-f10>'

" Plugins loaded, enable syntax
syntax enable

set modelines=3
set encoding=utf-8
set laststatus=2

" On error (make) first check all tabs, then create new one
set switchbuf=usetab,newtab

" Wrap to textwidth, wrap comments, insert comment leader on LF,
" insert comment leader on o, allow formatting with gq{motion}
set formatoptions=tcroq

" Allow backspacing
set backspace=indent,eol,start

" 4-wide space tabs
set tabstop=4 softtabstop=4 shiftwidth=4 expandtab

" C family comment settings
autocmd FileType c,d,cpp setlocal comments=://
autocmd FileType c,d,cpp setlocal comments^=:///
autocmd FileType c,d,cpp setlocal comments^=s1:/**,mb:\ *,ex:\ */,s1:/*,mb:*,ex:*/
autocmd FileType d setlocal comments^=s1:/++,mb:\ +,ex:\ +/,s1:/+,mb:+,ex:+/

" CoolBasic needs all these, always
autocmd FileType coolbasic setlocal comments=:\',://
autocmd FileType coolbasic setlocal sts=4 sw=4 et
autocmd FileType coolbasic setlocal fileformat=dos

" Vimscript comments
autocmd FileType vim setlocal comments=:\"

" Makefiles need tabs
autocmd FileType make setlocal noet

" Smarter searching 
set ignorecase
set smartcase

" Incremental searches w/ hilight
set incsearch
set hlsearch

" Automatic indentation
set autoindent

" STATIC MACRO LISTINGS
" Include guards
" let @g='yypp0i#endif /* $a */Ok0i#define k0i#ifndef jj'
" Replaced by the "once" snippet

" Autoloader
augroup myvimrc
au!
au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END
